package utils{	public dynamic class ArrayUtil {		public static function test():void {			trace("test");		}		public static function randRange(min:Number, max:Number):Number {			var randomNum:Number = Math.floor(Math.random()*(max-min+1))+min;			return randomNum;		}       				public function randomArraySort(_array:Array):Array {			var _length:Number = _array.length;			var mixed:Array = _array.slice();			var rn:Number;			var it:Number;			var el:Object;			for (it = 0; it<_length; it++) {				el = mixed[it];				rn = Math.floor(Math.random() * _length);				mixed[it] = mixed[rn];				mixed[rn] = el;			}			return mixed;		}		               		//removes duplicate items from an array that have the same passed property		public function removeDups(a:Array, p:String):Array       	{       		for (var i:uint = 0; i<a.length; i++){       			var node:* = a[i];       			while(numberOfOccurs(a, p, a[i][p])>1){       				a.splice(i, 1);       			}       		}       					return a;       	}          	private function occurs():void       	{       		       	}		//returns number of occurances of an item that contains the passed property		public function numberOfOccurs(a:Array, prop:String, s:String):int		{			var retA:Array = new Array();			var retI:uint = 0;			for (var i:uint = 0; i<a.length; i++){		    	trace("label:"+a[i].label);		    	//store the first index 		    	if(a[i][prop]==s){		    		retI++;		    		//if there is more than		    		//if (retI>1){		    		//	a.splice(i, 1);		    	}		    }		    return retI;						}        	}}