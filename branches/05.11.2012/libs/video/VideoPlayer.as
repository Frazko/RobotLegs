package video{	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.events.Event;	import utils.events.MetaDataEvent;	import org.osflash.signals.Signal;	import flash.display.Sprite;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	/**	 * @author acolling	 */	public class VideoPlayer extends Sprite {		public static const VIDEO_FINISHED_PLAYING : String = "VIDEO_FINISHED_PLAYING";		public var stream:NetStream;		public var bufferProgress:int;		public var isPlaying:Boolean;		public var streamConnectedSignal:Signal;		public var bufferProgressSignal:Signal;		public var bufferFullSignal:Signal;		public var bufferFlushSignal:Signal;		public var startedPlay:Signal;		public var stoppedPlay:Signal;		public var metaDataSignal:Signal;		private var _videoURL:String;		private var _connection:NetConnection;		private var _video:Video;		private var _bufferTime:Number;		private var _metaData:Object;		private var _bufferProgressTimer:Timer;						public function VideoPlayer (url:String, __buffer:Number = 0.1)		{			_videoURL = url;			_bufferTime = __buffer;			_video = new Video ();			isPlaying = false;			addChild (_video);			initSignals ();			// createNetConnection();   triggered later by user so you can set listener for meta data		}		private function initSignals ():void		{			streamConnectedSignal = new Signal ();			bufferFullSignal = new Signal ();			bufferFlushSignal = new Signal ();			bufferProgressSignal = new Signal (int);			startedPlay = new Signal ();			stoppedPlay = new Signal ();			metaDataSignal = new Signal ();			_bufferProgressTimer = new Timer (1);		}		public function get metaData ():Object		{			return _metaData;		}		public function createNetConnection ():void		{			// trace ("VideoPlayer:: createNetConnection");			_connection = new NetConnection ();			_connection.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);			_connection.addEventListener (SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			_connection.connect (null);		}		private function netStatusHandler (event:NetStatusEvent):void		{			trace ("net status--------" + event.info.code + ":" + _videoURL);			switch (event.info.code)			{				case "NetConnection.Connect.Success":					connectStream ();					streamConnectedSignal.dispatch ();					break;				case "NetStream.Play.StreamNotFound":					// trace ("VideoPlayer:: Stream not found: " + _videoURL);					break;				case "NetStream.Buffer.Full":					// trace ("\n\n\n\n\nVideoPlayer:: NetStream.Buffer.Full\n\n\n\n\n");					bufferFullSignal.dispatch ();					break;				case "NetStream.Play.Start":					// trace ("VideoPlayer:: NetStream.Play.Start");					isPlaying = true;					startedPlay.dispatch ();					break;				case "NetStream.Play.Stop":					isPlaying = false;					stoppedPlay.dispatch ();					var e:Event = new Event(VIDEO_FINISHED_PLAYING, true);					dispatchEvent(e);//so it can bubble					break;							}		}		public function setVideoSize (width:Number, height:Number):void		{			_video.width = width;			_video.height = height;		}		private function securityErrorHandler (event:SecurityErrorEvent):void		{			trace ("VideoPlayer:: securityErrorHandler: " + event);		}		public function connectStream (s:String = ""):void		{			stream = new NetStream (_connection);			stream.bufferTime = _bufferTime;			// trace ("VideoPlayer:: stream.bufferTime = " + stream.bufferTime);			stream.client = new CustomClient ();			stream.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);			// stream.client.addEventListener(MetaDataEvent.META_DATA_EVENT, metaDataListener);			_video.attachNetStream (stream);			var url:String = _videoURL;			if (s.length > 0) url = s;			_bufferProgressTimer.addEventListener (TimerEvent.TIMER, checkBufferProgress);			// _bufferProgressTimer.start ();			// FIXME : when the NetStream.pause method is called right after play no further NetStatusEvents are fired!!! put pause in Play.Start (remember to mute audio) and investigate further.			stream.play (url);			// stream.pause ();			// isPlaying = true;			// trace ("VideoPlayer:: connectStream : NetStatusEvent listener added to netstream object");		}		private function checkBufferProgress (event:TimerEvent):void		{			bufferProgress = Math.ceil ((stream.bufferLength / stream.bufferTime) * 100);			bufferProgressSignal.dispatch (bufferProgress);			if (bufferProgress >= 100) _bufferProgressTimer.removeEventListener (TimerEvent.TIMER, checkBufferProgress);		}		private function metaDataListener (event:MetaDataEvent):void		{			stream.client.removeEventListener (MetaDataEvent.META_DATA_EVENT, metaDataListener);			this.close ();			_metaData = event;			metaDataSignal.dispatch ();			stream.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);		}		// //  / VIDEO CONTROLS		public function stop ():void		{			stream.pause ();			stream.seek (0);			// isPlaying = false;			// stoppedPlay.dispatch ();		}		public function pause ():void		{			stream.pause ();			isPlaying = false;		}		public function seek (n:Number):void		{			stream.seek (n);		}		public function play ():void		{			// trace ("VideoPlayer:: play ();");			// _video.attachNetStream(stream);  needed?			stream.play (_videoURL);			// isPlaying = true;			// startedPlay.dispatch ();		}		public function close ():void		{			stream.close ();			isPlaying = false;		}	}}import utils.events.CuePointEvent;import flash.events.EventDispatcher;import utils.events.MetaDataEvent;import flash.events.Event;// /class CustomClient extends EventDispatcher{	public function onMetaData (info:Object):void	{		// trace ("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);		var e:MetaDataEvent = new MetaDataEvent (MetaDataEvent.META_DATA_EVENT, info);		dispatchEvent (e);	}	public function onXMPData (info:Object):void	{		// trace("XMPDATA"); // USED AS WAS THROWING AN ERROR OTHERWISE for unhandled event	}	public function onCuePoint (info:Object):void	{		var e:CuePointEvent = new CuePointEvent (CuePointEvent.CUE_POINT, info.type, info.name, info.time);		dispatchEvent (e);	}}